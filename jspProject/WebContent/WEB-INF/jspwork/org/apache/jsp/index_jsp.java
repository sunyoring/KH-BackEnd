/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-08-10 08:40:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>JSP</h1>\r\n");
      out.write("	<p> JSP 란 , HTML 형식내에서 자바코드를 사용할수 있는 \"자바언어 \"로<br>\r\n");
      out.write("		서블릿(java코드) 내에서 응답화면 (html)을 구현했던 복잠함을 보다 간단하게 작성, 해결할수있다. \r\n");
      out.write("		-> 즉, JSP 의 가장 큰 장점은  Servlet에서는 비지니스 로직처리에만 집중하고 응답화면을 \r\n");
      out.write("		   만들어 내는 것은 JSP 에서 작성 하게끔 분리할 수 있다. \r\n");
      out.write("	\r\n");
      out.write("	</p>\r\n");
      out.write("	<h1>JSP Elements 표현법</h1>\r\n");
      out.write("	<p> JSP 페이지에 자바코드를 직접 기술할수 있게 해주는 기능 </p>\r\n");
      out.write("	<ol>\r\n");
      out.write("		<li> 선언문 : &lt;%! 자바코드   %&gt; \r\n");
      out.write("			멤버변수와 메소드를 선언하기 위해 사용 <br><br></li>\r\n");
      out.write("			\r\n");
      out.write("		<li> 스크립틀릿 : &lt;%  자바코드   %&gt; \r\n");
      out.write("			JSP에서 자바코드를 사용하기 위해 사용<br><br></li>\r\n");
      out.write("			\r\n");
      out.write("		<li> 표현식(출력식) : &lt;%=  자바코드   %&gt;\r\n");
      out.write("			자바에서 작성한 값을 화면에 출력하기 위해 사용 </li>\r\n");
      out.write("	</ol>\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<h2>2. 지시어 (Directive) &lt;%@ page|include|taglib 속성=\"속성값\" 속성=\"속성값\" %&gt;</h2>\r\n");
      out.write("	<p>JSP page 전체에 영향을 미치는 정보를 기술 할 때 쓰임</p>\r\n");
      out.write("	\r\n");
      out.write("	<ol>\r\n");
      out.write("		<li>\r\n");
      out.write("			page 지시자 : 현재의 JSP 페이지를 컨테이너에서 처리하는데 필요한 각종 속성을 기술하는 부분으로 JSP 문서의 맨 앞에 위치\r\n");
      out.write("			<ul>\r\n");
      out.write("				<li>language : 사용할 스크립트 언어 유형을 지정</li>\r\n");
      out.write("				<li>contentType : 웹 브라우저가 받아 볼 페이지의 형식, 인코딩 방식 지정</li>\r\n");
      out.write("				<li>pageEncoding : JSP 파일에 기록된 자바코드의 인코딩 방식을 지정</li>\r\n");
      out.write("				<li>import : 자바의 import와 같은 의미</li>\r\n");
      out.write("				<li>errorPage / isErrorPage : 오류페이지 관리</li>\r\n");
      out.write("				<li>등등..</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		</li>\r\n");
      out.write("		<li>\r\n");
      out.write("			include 지시자 : jsp 파일에 또다른 jsp를 포함하고자 할 때 사용하는 지시자<br>\r\n");
      out.write("		</li>\r\n");
      out.write("		<li> taglib : JSP 기능을 좀더 확장할 수 있는 인자로  정의된 사용자 정의 태그를 가져와 사용할 수 있는 방법 제공 </li>	\r\n");
      out.write("	</ol>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h1>JSP테스트</h1>\r\n");
      out.write("	<h3><a href=\"views/01_sum.jsp\">테스트1</a></h3>\r\n");
      out.write("	<h3><a href=\"views/02_date.jsp\">테스트2</a></h3>\r\n");
      out.write("	<h3><a href=\"views/03_menu.jsp\">테스트3</a></h3>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
